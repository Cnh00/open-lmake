#!/bin/bash -ex

# This file is part of the open-lmake distribution (git@github.com:cesar-douady/open-lmake.git)
# Copyright (c) 2023 Doliam
# This program is free software: you can redistribute/modify under the terms of the GPL-v3 (https://www.gnu.org/licenses/gpl-3.0.html).
# This program is distributed WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

ok() {
	if $@ >/dev/null ; then echo 1
	else                    echo 0
	fi
}

MK_FILE=$1
H_FILE=$2

unset CDPATH # ensure cd goes to the right directory and writes nothing to stdout

PATH="$(realpath $(dirname $0)):$PATH" # access to local exe's

START_DIR=$(pwd)
rm -rf trial
mkdir  trial
cd     trial

#
# CXX configuration
#

CXX=${CXX:-g++}

case "$(basename $CXX)" in
	clang++  ) CXX_FLAVOR=clang ;;
	clang++-*) CXX_FLAVOR=clang ;;
	g++      ) CXX_FLAVOR=gcc   ;;
	g++-*    ) CXX_FLAVOR=gcc   ;;
	c++      ) CXX_FLAVOR=gcc   ;;
	clang    ) echo compiler must be a native C++ one, such as clang++             >&2 ; exit 1 ;;
	clang-*  ) echo compiler must be a native C++ one, such as clang++${CXX#clang} >&2 ; exit 1 ;;
	gcc      ) echo compiler must be a native C++ one, such as g++                 >&2 ; exit 1 ;;
	gcc-*    ) echo compiler must be a native C++ one, such as g++${CXX#gcc}       >&2 ; exit 1 ;;
	cc       ) echo compiler must be a native C++ one, such as c++                 >&2 ; exit 1 ;;
	*        ) echo cannot recognize c compiler $CCX                               >&2 ; exit 1 ;;
esac

CXX=$(type -p $CXX)
[ "$CXX" ] || { echo $CXX not found >&2 ; exit 1 ; }

CXX_VERSION=$($CXX -dumpversion)                                               # outputs either major version or full version, depending on flavors and versions
CXX_VERSION=${CXX_VERSION%%.*}                                                 # strip minor if present
[ "$CXX_VERSION" ] || { echo cannot determine version of $CXX >&2 ; exit 1 ; }
case "$CXX_FLAVOR" in
	clang) [[ $CXX_VERSION -ge 14 ]] || { echo $CXX version $CXX_VERSION must be at least 14 >&2 ; exit 1 ; } ;;
	gcc  ) [[ $CXX_VERSION -ge 11 ]] || { echo $CXX version $CXX_VERSION must be at least 11 >&2 ; exit 1 ; } ;;
esac

LINK_LIB_PATH=$(find_cc_ld_library_path $CXX)
LINK_LIB_PATH=${LINK_LIB_PATH//:/ }

$CXX -v -E -o /dev/null -xc - </dev/null 2>compiler_info
STD_INC_DIRS="$(echo $(realpath $(sed -e '1,/<.*>.*search starts/d' -e '/End of search/,$d' compiler_info)) )" # echo is used to replace \n by space

if   $CXX -o /dev/null -xc++ -std=c++23 - <<< 'int main() {}' ; then CXX_STD=c++23
elif $CXX -o /dev/null -xc++ -std=c++20 - <<< 'int main() {}' ; then CXX_STD=c++20
else                                                            echo $CXX must support at least c++20 ; exit 1
fi

#
# Python configuration (Python2 is optional)
#

config_python() {
	python=$1
	ver=$2
	python=${python:-python$ver}
	p=$(type -p $python || :)
	[ "$p" ] || { echo $python not found >&2 ; return 1 ; }
	python=$p
	llp=$LD_LIBRARY_PATH                                                        # save LD_LIBARY_PATH
	export LD_LIBRARY_PATH="$(dirname $(dirname $python))/lib:$LD_LIBRARY_PATH"
	py_major=$($python -c 'import sys       ; print(sys.version_info.major                )')
	py_minor=$($python -c 'import sys       ; print(sys.version_info.minor                )')
	inc_dir=$( $python -c 'import sysconfig ; print(sysconfig.get_config_var("INCLUDEDIR"))')
	inc_py=$(  $python -c 'import sysconfig ; print(sysconfig.get_config_var("INCLUDEPY" ))')
	lib_base=$($python -c 'import sysconfig ; print(sysconfig.get_config_var("LDLIBRARY" ))')
	lib_dir=$( $python -c 'import sysconfig ; print(sysconfig.get_config_var("LIBDIR"    ))')
	case $ver in
		2)
			[ $py_major -eq 2 ] || { echo $python version must be 2.x          >&2 ; return 1 ; }
			[ $py_minor -ge 7 ] || { echo $python version must be at least 2.7 >&2 ; return 1 ; }
		;;
		3)
			[ $py_major -eq 3 ] || { echo $python version must be 3.x          >&2 ; return 1 ; }
			[ $py_minor -ge 6 ] || { echo $python version must be at least 3.6 >&2 ; return 1 ; }
		;;
	esac
	[ "${lib_base%.so}" != "${lib_base}" ] || { echo $python library $lib_base is not a shared library >&2 ; return 1 ; }
	case "$lib_dir/" in
		/usr/lib/*)   lib_dir= ;;
		/usr/lib64/*) lib_dir= ;;
	esac
	[ ! "$lib_dir" ] || lib_opt=-L$lib_dir
	cat <<-"EOF" >probe_python$ver.c
		#include <Python.h>
		int main() {
			PyObject* none = Py_None ;
		}
	EOF
	$CXX -o probe_python$ver -I$inc_py $lib_opt -xc probe_python$ver.c -l:$lib_base || { echo $python is unusable as a library >&2 ; return 1 ; }
	eval "PYTHON${ver#3}=$python"
	eval "PY${ver}_INCLUDEDIR=$inc_dir"
	eval "PY${ver}_INCLUDEPY=$inc_py"
	eval "PY${ver}_LIB_BASE=$lib_base"
	eval "PY${ver}_LIB_DIR=$lib_dir"
	LD_LIBRARY_PATH=$llp                                                        # restore LD_LIBARY_PATH
}

config_python "$PYTHON2" 2 || PYTHON2= # python2 is optional
config_python "$PYTHON"  3 || exit 1

if [ "$PY2_LIB_DIR" -a "$PY_LIB_DIR" ] ; then PY_LD_LIBRARY_PATH=$PY3_LIB_DIR:$PY2_LIB_DIR # both present, separate with :
else                                          PY_LD_LIBRARY_PATH=$PY3_LIB_DIR$PY2_LIB_DIR  # only one is present
fi

#
# LD_SO_LIB64 & LD_SO_LIB32
#
$CXX      -o ld_so_lib    -xc - <<< 'int main(){}' && LD_SO_LIB=$(   strace -E LD_PRELOAD='/>>>$LIB<<<' ./ld_so_lib    2>&1 | awk '/>>>.*<<</ { sub(/.*>>>/,"") ; sub(/<<<.*/,"") ; print ; exit }')
$CXX -m32 -o ld_so_lib_32 -xc - <<< 'int main(){}' && LD_SO_LIB_32=$(strace -E LD_PRELOAD='/>>>$LIB<<<' ./ld_so_lib_32 2>&1 | awk '/>>>.*<<</ { sub(/.*>>>/,"") ; sub(/<<<.*/,"") ; print ; exit }')
[ "$LD_SO_LIB" -eq "$LD_SO_LIB_32" ] && LD_SO_LIB_32=

#
# ADDR2LINE
#
[ ""              ] || ADDR2LINE=$(find $(dirname $(realpath $CXX)) -name llvm-addr2line)
[ -x "$ADDR2LINE" ] || ADDR2LINE=$(find $(dirname $(realpath $CXX)) -name addr2line     )
[ -x "$ADDR2LINE" ] || ADDR2LINE=$(type -p addr2line)

#
# HAS_CLOSE_RANGE
# test whether we can include linux/close_range.h
#
HAS_CLOSE_RANGE=$( ok $CXX -E --include 'linux/close_range.h' -o /dev/null -xc /dev/null )

#
# HAS_FUSE
#
HAS_FUSE=$(ok pkg-config fuse3)
HAS_FUSE=0                      # XXX : enable fuse when ready

#
# HAS_LD_AUDIT
# test whether LD_AUDIT environment variable is managed by dynamic linker
#
source /etc/os-release
case "$ID" in
	ubuntu)
		case "$VERSION_ID" in
			20.04) HAS_LD_AUDIT=0 ;; # Ubuntu fix : Ubuntu 20.04 seems to miss calling auditing code upon ldopen
		esac
	;;
	centos)
		case "$VERSION_ID" in
			7) HAS_LD_AUDIT=0 ;;     # CentOS7 fix : This is what would answer a real centos-7 system, but we may be running in a docker which has a more recent kernel.
		esac
	;;
esac
if [ -z "$HAS_LD_AUDIT" ] ; then
	cat <<-"EOF" > audited.c
		#include<stdio.h>
		int main() { printf("0") ; }
	EOF
	cat <<-"EOF" > ld_audit.c
		#include<stdio.h>
		#include<stdlib.h>
		unsigned int la_version(unsigned int) { printf("1") ; exit(0) ; }
	EOF
	$CXX -o audited                   -xc audited.c
	$CXX -o ld_audit.so -shared -fPIC -xc ld_audit.c
	HAS_LD_AUDIT=$(LD_AUDIT=./ld_audit.so ./audited)
fi

#
# HAS_MEMFD
#
cat <<"EOF" > memfd.c
	#ifndef _GNU_SOURCE
		#define _GNU_SOURCE
	#endif
	#include<sys/mman.h>
	int main() { memfd_create("trial",0) ; }
EOF
HAS_MEMFD=$(ok $CXX -Werror -o memfd -xc memfd.c)

#
# HAS_OSTRINGSTREAM_VIEW
# test whether std::ostringstream has method view()
#
cat <<"EOF" > ostringstream_view.cc
	#include <sstream>
	std::string_view ossv = std::ostringstream().view() ;
EOF
HAS_OSTRINGSTREAM_VIEW=$( ok $CXX -c -std=$CXX_STD -o ostringstream_view.o ostringstream_view.cc )

#
# HAS_PCRE
#
cat <<"EOF" > pcre.cc
	#define PCRE2_CODE_UNIT_WIDTH 8
	#include <pcre2.h>
	int main() {
		pcre2_compile(nullptr,0,PCRE2_ANCHORED|PCRE2_DOTALL|PCRE2_ENDANCHORED,nullptr,nullptr,nullptr) ;
	}
EOF
HAS_PCRE=$( ok $CXX -std=$CXX_STD -o pcre.o pcre.cc -lpcre2-8 )

#
# HAS_SECCOMP
# test whether we have seccomp : warning, include <seccomp.h> is not enough to test, check its content too
#
cat <<"EOF" > seccomp.c
	#include <seccomp.h>
	struct scmp_version v ;
	int main() {
		scmp_filter_ctx ctx ;
		seccomp_syscall_priority(ctx,0,0) ;
	}
EOF
# usually seccomp.h is in /usr/include (with an internal file /usr/include/linux/seccomp.h) but some systems have seccomp.h directly installed in /usr/include/linux
if $CXX -idirafter /usr/include/linux -o seccomp -xc seccomp.c -l:libseccomp.so.2 ; then HAS_SECCOMP=1
else                                                                                     HAS_SECCOMP=0
fi

#
# HAS_SGE
#
HAS_SGE=$(ok type -p qsub)

#
# HAS_SLURM
#
if [ "$SLURM" ] ; then
	SLURM_INC_DIR=$SLURM/include
	SLURM_SO="$(find $SLURM -name lib32 -prune -o -name libslurm.so || :)" # exclude 32 bits in case of ...
	SLURM_SO=${SLURM_SO% *}                                                # only select first if there is ambiguity
fi
[ "$SLURM" ] || SLURM_SO=libslurm.so
HAS_SLURM=$( ok $CXX -E ${SLURM_INC_DIR:+-isystem $SLURM_INC_DIR} --include slurm/slurm.h -xc /dev/null )

#
# LIB_STACKTRACE
#
cat <<"EOF" > stacktrace.cc
	#include <stacktrace>
	using namespace std ;
	int main() {                                    // mimic a mini-program using stack trace
		::stacktrace st = ::stacktrace::current() ;
		int          rc = 0                       ;
		for( ::stacktrace_entry const& e : st ) rc += e.source_line() ;
		return rc ;
	}
EOF
if   $CXX -std=$CXX_STD -o /dev/null stacktrace.cc -lstdc++_libbacktrace ; then LIB_STACKTRACE=stdc++_libbacktrace         # compile and link, to ensure both steps are ok
elif $CXX -std=$CXX_STD -o /dev/null stacktrace.cc -lstdc++exp           ; then LIB_STACKTRACE=stdc++exp                   # .
fi
if   $CXX -m32 -std=$CXX_STD -o /dev/null stacktrace.cc -lstdc++_libbacktrace ; then LIB_STACKTRACE_32=stdc++_libbacktrace # compile and link, to ensure both steps are ok
elif $CXX -m32 -std=$CXX_STD -o /dev/null stacktrace.cc -lstdc++exp           ; then LIB_STACKTRACE_32=stdc++exp           # .
fi
HAS_STACKTRACE=$((   ${LIB_STACKTRACE:+   1}))
HAS_STACKTRACE_32=$((${LIB_STACKTRACE_32:+1}))

#
# MAX_PID
#
MAX_PID=$(cat /proc/sys/kernel/pid_max)

#
# MUST_UNDEF_PTRACE_MACROS
#
cat <<"EOF" > undef_ptrace_macros.c
	#include<sys/ptrace.h>
	#include<linux/ptrace.h>
	#undef PTRACE_TRACEME
	void foo() {
		long rx = ptrace(PTRACE_TRACEME,0,0,0) ;
	}
EOF
MUST_UNDEF_PTRACE_MACROS=$( ok $CXX -c -idirafter /usr/include/linux -o undef_ptrace_macros.o -xc undef_ptrace_macros.c )

#
# HAS_PTRACE_GET_SYSCALL_INFO (must be after MUST_UNDEF_PTRACE_MACROS)
#
cat <<"EOF" > get_syscall_info.c
	#include<sys/ptrace.h>
	#include<linux/ptrace.h>
	#if MUST_UNDEF_PTRACE_MACROS
		#undef PTRACE_GET_SYSCALL_INFO
	#endif
	void foo() {
		long rx = ptrace(PTRACE_GET_SYSCALL_INFO,0,0,0) ;
	}
EOF
HAS_PTRACE_GET_SYSCALL_INFO=$( ok $CXX -c -idirafter /usr/include/linux -DMUST_UNDEF_PTRACE_MACROS=$MUST_UNDEF_PTRACE_MACROS -o get_syscall_info.o -xc get_syscall_info.c )

#
# NEED_STAT_WRAPPERS
# test whether stat syscalls are transformed into __xstat
#
cat <<"EOF" > stat.c
	#include <sys/stat.h>
	struct stat buf ;
	int main() { stat("",&buf) ; }
EOF
$CXX -o stat_trial -xc stat.c
nm -D stat_trial > stat_trial.nm
NEED_STAT_WRAPPERS=$(( ! $(ok grep -wq stat stat_trial.nm) ))

#
# USE_LIBC_START_MAIN
#
cat <<"EOF" > start_main.c
	#include<unistd.h>
	int __libc_start_main( void* main , int argc , void* argv , void* auxvec , void* init , void* fini , void* rtld_fini , void* stack_end) {
		write(1,"1",1) ; // stick to very basic sycalls as nothing is initialized yet
		_exit(0) ;       // dont call main
	}
	int main() { write(1,"0",1) ; }
EOF
$CXX -o start_main -xc start_main.c
USE_LIBC_START_MAIN=$(./start_main)

#
# STD_PATH
#
STD_PATH=$(env -i /bin/bash -c 'echo $PATH')

#
# MAP_VFORK
#
# Linux specifies vfork more precisely than Posix
# with Linux, we must not map vfork to fork as vfork is *not* a subset of fork, in exchange we can instrument exec in child
# with posix, we must map vfork to fork as vfork is a subset of fork and instrumenting exec in child is forbidden with vfork
MAP_VFORK=0

cd $START_DIR

cat >$MK_FILE <<EOF
BASH               := /bin/bash
GIT                := $(type -p ${GIT:-git})
#
PYTHON2            := $PYTHON2
PY2_INCLUDEDIR     := $PY2_INCLUDEDIR
PY2_INCLUDEPY      := $PY2_INCLUDEPY
PY2_LIB_DIR        := $PY2_LIB_DIR
PY2_LIB_BASE       := $PY2_LIB_BASE
PYTHON             := $PYTHON
PY3_INCLUDEDIR     := $PY3_INCLUDEDIR
PY3_INCLUDEPY      := $PY3_INCLUDEPY
PY3_LIB_DIR        := $PY3_LIB_DIR
PY3_LIB_BASE       := $PY3_LIB_BASE
PY_LD_LIBRARY_PATH := $PY_LD_LIBRARY_PATH
#
CXX                := $CXX
CXX_FLAVOR         := $CXX_FLAVOR
CXX_STD            := $CXX_STD
LIB_STACKTRACE     := $LIB_STACKTRACE
LIB_STACKTRACE_32  := $LIB_STACKTRACE_32
LINK_LIB_PATH      := $LINK_LIB_PATH
STD_INC_DIRS       := $STD_INC_DIRS
#
SLURM_INC_DIR      := $SLURM_INC_DIR
#
LD_SO_LIB          := $LD_SO_LIB
LD_SO_LIB_32       := $LD_SO_LIB_32
#
HAS_FUSE           := ${HAS_FUSE#0}
HAS_PCRE           := ${HAS_PCRE#0}
HAS_SECCOMP        := ${HAS_SECCOMP#0}
HAS_SGE            := ${HAS_SGE#0}
HAS_SLURM          := ${HAS_SLURM#0}
#
STD_PATH           := $STD_PATH
EOF

if [ "$LD_SO_LIB_32" ] ; then
	case $HAS_STACKTRACE$HAS_STACKTRACE_32 in
		00) HAS_STACKTRACE_CUR=0                           >> $H_FILE ;;
		01) HAS_STACKTRACE_CUR='(__i386__||__arm__)'       >> $H_FILE ;;
		10) HAS_STACKTRACE_CUR='(__x86_64__||__aarch64__)' >> $H_FILE ;;
		11) HAS_STACKTRACE_CUR=1                           >> $H_FILE ;;
	esac
else
	HAS_STACKTRACE_CUR=$HAS_STACKTRACE
fi
cat >$H_FILE <<EOF
	#pragma once
	#define ADDR2LINE                   "$ADDR2LINE"
	#define HAS_CLOSE_RANGE             $HAS_CLOSE_RANGE
	#define HAS_FUSE                    $HAS_FUSE
	#define HAS_LD_AUDIT                $HAS_LD_AUDIT
	#define HAS_MEMFD                   $HAS_MEMFD
	#define HAS_OSTRINGSTREAM_VIEW      $HAS_OSTRINGSTREAM_VIEW
	#define HAS_PCRE                    $HAS_PCRE
	#define HAS_PTRACE_GET_SYSCALL_INFO $HAS_PTRACE_GET_SYSCALL_INFO
	#define HAS_SECCOMP                 $HAS_SECCOMP
	#define HAS_SGE                     $HAS_SGE
	#define HAS_SLURM                   $HAS_SLURM
	#define HAS_STACKTRACE              $HAS_STACKTRACE_CUR
	#define MAX_PID                     $MAX_PID
	#define MUST_UNDEF_PTRACE_MACROS    $MUST_UNDEF_PTRACE_MACROS
	#define MAP_VFORK                   $MAP_VFORK
	#define NEED_STAT_WRAPPERS          $NEED_STAT_WRAPPERS
	#define PY_LD_LIBRARY_PATH          "$PY_LD_LIBRARY_PATH"
	#define PYTHON                      "$PYTHON"
	#define SLURM_SO                    "$SLURM_SO"
	#define STD_PATH                    "$STD_PATH"
	#define USE_LIBC_START_MAIN         $USE_LIBC_START_MAIN
EOF
