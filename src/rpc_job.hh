// This file is part of the open-lmake distribution (git@github.com:cesar-douady/open-lmake.git)
// Copyright (c) 2023 Doliam
// This program is free software: you can redistribute/modify under the terms of the GPL-v3 (https://www.gnu.org/licenses/gpl-3.0.html).
// This program is distributed WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

#pragma once

#include "config.hh"

#include "disk.hh"
#include "hash.hh"
#include "serialize.hh"
#include "time.hh"

#include "autodep/env.hh"

// START_OF_VERSIONING

ENUM_1( BackendTag // PER_BACKEND : add a tag for each backend
,	Dflt = Local
,	Unknown        // must be first
,	Local
,	Slurm
)

ENUM_1( FileActionTag
,	HasFile = Uniquify                                                                                  // <=HasFile means action acts on file
,	None                                                                                                // no action, just check integrity
,	Src                                                                                                 // file is src, no action
,	Unlnk
,	Uniquify
,	Mkdir
,	Rmdir
)
struct FileAction {
	friend ::ostream& operator<<( ::ostream& , FileAction const& ) ;
	// cxtors & casts
	FileAction(FileActionTag t={} , Hash::Crc c={} , Disk::Ddate d={} ) : tag{t} , crc{c} , date{d}  {} // should be automatic but clang lacks some automatic conversions in some cases
	// data
	FileActionTag tag  = {} ;
	Hash::Crc     crc  ;                                                                                // expected (else, quarantine)
	Disk::Ddate   date ;                                                                                // .
} ;
::pair<vector_s/*unlnks*/,pair_s<bool/*ok*/>/*msg*/> do_file_actions( ::vmap_s<FileAction>&& pre_actions , Disk::NfsGuard& nfs_guard , Algo ) ;

ENUM_2( Dflag                          // flags for deps
,	NRule = Required                   // number of Dflag's allowed in rule definition
,	NDyn  = Static                     // number of Dflag's allowed in lside flags
	//
,	Critical                           // if modified, ignore following deps
,	Essential                          // show when generating user oriented graphs
,	IgnoreError                        // dont propagate error if dep is in error (Error instead of Err because name is visible from user)
,	Required                           // dep must be buildable
,	Static                             // is static dep, for internal use only
)
static constexpr char DflagChars[] = {
	'E'                                // Essential
,	'c'                                // Critical
,	'e'                                // IgnoreError
,	'r'                                // Required
,	'S'                                // Static
} ;
static_assert(::size(DflagChars)==N<Dflag>) ;
using Dflags = BitMap<Dflag> ;

ENUM_1( ExtraDflag
,	NRule                                   // all flags allowed
,	Top
,	Ignore
,	StatReadData
)
static constexpr char ExtraDflagChars[] = {
	0                                       // Top
,	'I'                                     // Ignore
,	'd'                                     // StatReadData
} ;
static_assert(::size(ExtraDflagChars)==N<ExtraDflag>) ;
using ExtraDflags = BitMap<ExtraDflag> ;

ENUM_2( Tflag                          // flags for targets
,	NRule = Static                     // number of Tflag's allowed in rule definition
,	NDyn  = Phony                      // number of Tflag's allowed inlside flags
,	Essential                          // show when generating user oriented graphs
,	Incremental                        // reads are allowed (before earliest write if any)
,	NoUniquify                         // target is uniquified if it has several links and is incremental
,	NoWarning                          // warn if target is either uniquified or unlinked and generated by another rule
,	Phony                              // accept that target is not generated
,	Static                             // is static  , for internal use only, only if also a Target
,	Target                             // is a target, for internal use only
)
static constexpr char TflagChars[] = {
	'E'                                // Essential
,	'i'                                // Incremental
,	'p'                                // Phony
,	'u'                                // NoUniquify
,	'w'                                // NoWarning
,	'S'                                // Static
,	'T'                                // Target
} ;
static_assert(::size(TflagChars)==N<Tflag>) ;
using Tflags = BitMap<Tflag> ;
static inline bool static_phony(Tflags tf) {
	return tf[Tflag::Target] && (tf[Tflag::Static]||tf[Tflag::Phony]) ;
}

ENUM_1( ExtraTflag
,	NRule = Allow                           // number of Tflag's allowed in rule definition
,	Top
,	Ignore
,	SourceOk                                // ok to overwrite source files
,	Allow                                   // writing to this target is allowed (for use in clmake.target and ltarget)
)
static constexpr char ExtraTflagChars[] = {
	0                                       // Top
,	'I'                                     // Ignore
,	's'                                     // SourceOk
,	'a'                                     // Allow
} ;
static_assert(::size(ExtraTflagChars)==N<ExtraTflag>) ;
using ExtraTflags = BitMap<ExtraTflag> ;

ENUM( JobProc
,	None
,	Start
,	ReportStart
,	GiveUp      // Req (all if 0) was killed and job was not (either because of other Req's or it did not start yet)
,	ChkDeps
,	DepInfos
,	Decode
,	Encode
,	LiveOut
,	End
)

ENUM_3( JobReasonTag                                // see explanations in table below
,	HasNode = NoTarget                              // if >=HasNode, a node is associated
,	Err     = DepOverwritten
,	Missing = DepMissingStatic
	//
,	None
//	with reason
,	OldErr
,	Rsrcs
,	PollutedTargets
,	ChkDeps
,	Cmd
,	Force
,	Garbage
,	Killed
,	Lost
,	New
//	with node
,	NoTarget
,	PollutedTarget
,	PrevTarget
,	ClashTarget
,	DepOutOfDate
,	DepUnlnked
,	DepUnstable
//	with error
,	DepOverwritten
,	DepDangling
,	DepErr
,	DepMissingRequired
// with missing
,	DepMissingStatic
)
static constexpr const char* JobReasonTagStrs[] = {
	"no reason"                                     // None
//	with reason
,	"job was in error"                              // OldErr
,	"resources changed and job was in error"        // Rsrcs
,	"polluted targets"                              // PollutedTargets
,	"dep check requires rerun"                      // ChkDeps
,	"command changed"                               // Cmd
,	"job forced"                                    // Force
,	"job ran with unstable data"                    // Garbage
,	"job was killed"                                // Killed
,	"job was lost"                                  // Lost
,	"job was never run"                             // New
//	with node
,	"missing target"                                // NoTarget
,	"target polluted by another job"                // PollutedTarget
,	"target previously existed"                     // PrevTarget
,	"multiple simultaneous writes"                  // ClashTarget
,	"dep out of date"                               // DepOutOfDate
,	"dep not on disk"                               // DepUnlnked
,	"dep changed during job execution"              // DepUnstable
//	with error
,	"dep has been overwritten"                      // DepOverwritten
,	"dep is dangling"                               // DepDangling
,	"dep in error"                                  // DepErr
,	"required dep missing"                          // DepMissingRequired
// with missing
,	"static dep missing"                            // DepMissingStatic
} ;
static_assert(::size(JobReasonTagStrs)==N<JobReasonTag>) ;
static constexpr uint8_t JobReasonTagPrios[] = {
//	no reason, must be 0
	0                                               // None
//	with reason
,	1                                               // OldErr
,	2                                               // Rsrcs
,	3                                               // PollutedTargets
,	7                                               // ChkDeps
,	9                                               // Cmd
,	10                                              // Force
,	10                                              // Garbage
,	10                                              // Killed
,	10                                              // Lost
,	11                                              // New
//	with node
,	4                                               // NoTarget
,	5                                               // PollutedTarget
,	5                                               // PrevTarget
,	6                                               // ClashTarget
,	8                                               // DepOutOfDate
,	8                                               // DepUnlnked
,	8                                               // DepUnstable
//	with error, must be higher than ok reasons
,	20                                              // DepOverwritten
,	21                                              // DepDangling
,	21                                              // DepErr
,	21                                              // DepMissingRequired
// with missing, must be higher than err reasons
,	30                                              // DepMissingStatic
} ;
static_assert(::size(JobReasonTagPrios)==N<JobReasonTag>) ;

ENUM( MatchKind
,	Target
,	SideTargets
,	SideDeps
)

ENUM_3( Status                                    // result of job execution
,	Early   = EarlyLostErr                        // <=Early means output has not been modified
,	Async   = Killed                              // <=Async means job was interrupted asynchronously
,	Garbage = BadTarget                           // <=Garbage means job has not run reliably
,	New                                           // job was never run
,	EarlyChkDeps                                  // dep check failed before job actually started
,	EarlyErr                                      // job was not started because of error
,	EarlyLost                                     // job was lost before starting     , retry
,	EarlyLostErr                                  // job was lost before starting     , do not retry
,	LateLost                                      // job was lost after having started, retry
,	LateLostErr                                   // job was lost after having started, do not retry
,	Killed                                        // job was killed
,	ChkDeps                                       // dep check failed
,	BadTarget                                     // target was not correctly initialized or simultaneously written by another job
,	Ok                                            // job execution ended successfully
,	Err                                           // job execution ended in error
)
static inline bool  is_lost(Status s) { return s<=Status::LateLostErr && s>=Status::EarlyLost ; }
static inline Bool3 is_ok  (Status s) {
	static constexpr Bool3 IsOkTab[] = {
		Maybe                                     // New
	,	Maybe                                     // EarlyChkDeps
	,	No                                        // EarlyErr
	,	Maybe                                     // EarlyLost
	,	No                                        // EarlyLostEr
	,	Maybe                                     // LateLost
	,	No                                        // LateLostErr
	,	Maybe                                     // Killed
	,	Maybe                                     // ChkDeps
	,	Maybe                                     // BadTarget
	,	Yes                                       // Ok
	,	No                                        // Err
	} ;
	static_assert(sizeof(IsOkTab)==N<Status>) ;
	return IsOkTab[+s] ;
}
static inline Status mk_err(Status s) {
	switch (s) {
		case Status::New       : return Status::EarlyErr     ;
		case Status::EarlyLost : return Status::EarlyLostErr ;
		case Status::LateLost  : return Status::LateLostErr  ;
		case Status::Ok        : return Status::Err          ;
	DF}
}
static inline JobReasonTag mk_reason(Status s) {
	static constexpr JobReasonTag ReasonTab[] = {
		JobReasonTag::New                         // New
	,	JobReasonTag::ChkDeps                     // EarlyChkDeps
	,	JobReasonTag::None                        // EarlyErr
	,	JobReasonTag::Lost                        // EarlyLost
	,	JobReasonTag::Lost                        // EarlyLostEr
	,	JobReasonTag::Lost                        // LateLost
	,	JobReasonTag::Lost                        // LateLostErr
	,	JobReasonTag::Killed                      // Killed
	,	JobReasonTag::ChkDeps                     // ChkDeps
	,	JobReasonTag::PollutedTargets             // BadTarget
	,	JobReasonTag::None                        // Ok
	,	JobReasonTag::None                        // Err
	} ;
	static_assert(sizeof(ReasonTab)==N<Status>) ;
	JobReasonTag res = ReasonTab[+s] ;
	SWEAR( res<JobReasonTag::HasNode , s , res ) ;
	return res ;
}

static const ::string EnvPassMrkr = {'\0','p'} ; // special illegal value to ask for value from environment
static const ::string EnvDynMrkr  = {'\0','d'} ; // special illegal value to mark dynamically computed env variables

static constexpr char QuarantineDirS[] = ADMIN_DIR "/quarantine/" ;

struct AccDflags {
	// services
	AccDflags  operator| (AccDflags other) const { return { accesses|other.accesses , dflags|other.dflags } ; }
	AccDflags& operator|=(AccDflags other)       { *this = *this | other ; return *this ;                     }
	// data
	Accesses accesses ;
	Dflags   dflags   ;
} ;

struct JobReason {
	friend ::ostream& operator<<( ::ostream& , JobReason const& ) ;
	using Tag = JobReasonTag ;
	// cxtors & casts
	JobReason(                   ) = default ;
	JobReason( Tag t             ) : tag{t}           { SWEAR( t< Tag::HasNode       , t     ) ; }
	JobReason( Tag t , NodeIdx n ) : tag{t} , node{n} { SWEAR( t>=Tag::HasNode && +n , t , n ) ; }
	// accesses
	bool operator+() const { return +tag                 ; }
	bool operator!() const { return !tag                 ; }
	bool need_run () const { return +tag && tag<Tag::Err ; }
	// services
	JobReason operator|(JobReason jr) const {
		if (JobReasonTagPrios[+tag]>=JobReasonTagPrios[+jr.tag]) return *this ; // at equal level, prefer older reason
		else                                                     return jr    ;
	}
	JobReason& operator|=(JobReason jr) { *this = *this | jr ; return *this ; }
	::string msg() const {
		if (tag<Tag::HasNode) SWEAR(node==0,tag,node) ;
		return JobReasonTagStrs[+tag] ;
	}

	// data
	Tag     tag  = JobReasonTag::None ;
	NodeIdx node = 0                  ;
} ;

struct JobStats {
	using Delay = Time::Delay ;
	// data
	Delay  cpu   = {} ;
	Delay  job   = {} ; // elapsed in job
	Delay  total = {} ; // elapsed including overhead
	size_t mem   = 0  ; // in bytes
} ;

template<class B> struct DepDigestBase ;

struct CrcDate {
	friend ::ostream& operator<<( ::ostream& , CrcDate const& ) ;
	using Crc   = Hash::Crc   ;
	using Ddate = Time::Ddate ;
	//cxtors & casts
	/**/              CrcDate(                           ) : _crc{} {               }
	/**/              CrcDate(Crc                     c  )          { *this = c   ; }
	/**/              CrcDate(Ddate                   d  )          { *this = d   ; }
	/**/              CrcDate(CrcDate const&          cd )          { *this = cd  ; }
	template<class B> CrcDate(DepDigestBase<B> const& ddb)          { *this = ddb ; }
	//
	/**/              CrcDate& operator=(Crc                     c  ) { is_date = false ; _crc  = c ;                                 return *this ; }
	/**/              CrcDate& operator=(Ddate                   d  ) { is_date = true  ; _date = d ;                                 return *this ; }
	/**/              CrcDate& operator=(CrcDate          const& cd ) { { if (cd .is_date) *this=cd.date() ; else *this=cd .crc() ; } return *this ; }
	template<class B> CrcDate& operator=(DepDigestBase<B> const& ddb) {
		if (!ddb.accesses) return *this = Crc()      ;
		if ( ddb.is_date ) return *this = ddb.date() ;
		/**/               return *this = ddb.crc () ;
	}
	// accesses
	bool operator==(CrcDate const& other) const {
		if (is_date!=other.is_date) return false                ;
		if (is_date               ) return date()==other.date() ;
		/**/                        return crc ()==other.crc () ;
	}
	bool  operator+() const {                   return is_date || +_crc ; }
	bool  operator!() const {                   return !+*this          ; }
	Crc   crc      () const { SWEAR(!is_date) ; return _crc             ; }
	Ddate date     () const { SWEAR( is_date) ; return _date            ; }
	//
	bool seen(Accesses a) const { // return true if accesses could perceive the existence of file
		if (!a) return false ;
		SWEAR(+*this,*this,a) ;
		if (is_date) return +_date && !Crc::None.match( Crc(_date.tag()) , a ) ;
		else         return           !Crc::None.match( _crc             , a ) ;
	}
	// data
	bool is_date = false ;
private :
	union {
		Crc   _crc  ;             // ~46<64 bits
		Ddate _date ;             // ~45<64 bits
	} ;
} ;

// for Dep recording in book-keeping, we want to derive from Node
// but if we derive from Node and have a field DepDigest, it is impossible to have a compact layout because of alignment constraints
// hence this solution : derive from a template argument
template<class B> ::ostream& operator<<( ::ostream& , DepDigestBase<B> const& ) ;
template<class B> struct DepDigestBase : NoVoid<B> {
	friend ::ostream& operator<< <>( ::ostream& , DepDigestBase const& ) ;
	using Base = NoVoid<B> ;
	static constexpr bool HasBase = !::is_same_v<B,void> ;
	//
	using Tag   = FileTag     ;
	using Crc   = Hash::Crc   ;
	using Ddate = Time::Ddate ;
	//cxtors & casts
	constexpr DepDigestBase(                                                           bool p=false ) :                                       parallel{p} { crc     ({}) ; }
	constexpr DepDigestBase(          Accesses a ,                     Dflags dfs={} , bool p=false ) :           dflags(dfs) , accesses{a} , parallel{p} { crc     ({}) ; }
	constexpr DepDigestBase(          Accesses a , Crc            c  , Dflags dfs={} , bool p=false ) :           dflags(dfs) , accesses{a} , parallel{p} { crc     (c ) ; }
	constexpr DepDigestBase(          Accesses a , Ddate          d  , Dflags dfs={} , bool p=false ) :           dflags(dfs) , accesses{a} , parallel{p} { date    (d ) ; }
	constexpr DepDigestBase(          Accesses a , CrcDate const& cd , Dflags dfs={} , bool p=false ) :           dflags(dfs) , accesses{a} , parallel{p} { crc_date(cd) ; }
	constexpr DepDigestBase( Base b , Accesses a ,                     Dflags dfs={} , bool p=false ) : Base{b} , dflags(dfs) , accesses{a} , parallel{p} { crc     ({}) ; }
	constexpr DepDigestBase( Base b , Accesses a , Crc            c  , Dflags dfs={} , bool p=false ) : Base{b} , dflags(dfs) , accesses{a} , parallel{p} { crc     (c ) ; }
	constexpr DepDigestBase( Base b , Accesses a , Ddate          d  , Dflags dfs={} , bool p=false ) : Base{b} , dflags(dfs) , accesses{a} , parallel{p} { date    (d ) ; }
	constexpr DepDigestBase( Base b , Accesses a , CrcDate const& cd , Dflags dfs={} , bool p=false ) : Base{b} , dflags(dfs) , accesses{a} , parallel{p} { crc_date(cd) ; }
	// initializing _crc in all cases (which crc_date does not do) is important to please compiler (gcc-11 -O3)
	template<class B2> constexpr DepDigestBase(          DepDigestBase<B2> const& dd ) :           dflags(dd.dflags) , accesses{dd.accesses} , parallel{dd.parallel} , _crc{} { crc_date(dd) ; }
	template<class B2> constexpr DepDigestBase( Base b , DepDigestBase<B2> const& dd ) : Base{b} , dflags(dd.dflags) , accesses{dd.accesses} , parallel{dd.parallel} , _crc{} { crc_date(dd) ; }
	//
	constexpr bool operator==(DepDigestBase const& other) const {
		if constexpr (HasBase) if (Base::operator!=(other) ) return false              ;
		/**/                   if (dflags  !=other.dflags  ) return false              ;
		/**/                   if (accesses!=other.accesses) return false              ;
		/**/                   if (parallel!=other.parallel) return false              ;
		/**/                   if (is_date !=other.is_date ) return false              ;
		/**/                   if (is_date                 ) return _date==other._date ;
		/**/                                                 return _crc ==other._crc  ;
	}
	// accesses
	constexpr Crc   crc       () const { SWEAR( +accesses && !is_date , accesses , is_date ) ; return _crc                       ; }
	constexpr Ddate date      () const { SWEAR( +accesses &&  is_date , accesses , is_date ) ; return _date                      ; }
	constexpr bool never_match() const { SWEAR(              !is_date , accesses , is_date ) ; return _crc.never_match(accesses) ; }
	//
	constexpr void crc (Crc   c) { is_date = false ; _crc  = c ; }
	constexpr void date(Ddate d) { is_date = true  ; _date = d ; }
	constexpr void crc_date(CrcDate const& cd) {
		if ( cd.is_date ) date(cd.date()) ;
		else              crc (cd.crc ()) ;
	}
	template<class B2> constexpr void crc_date(DepDigestBase<B2> const& dd) {
		if (!dd.accesses) return ;
		if ( dd.is_date ) date(dd.date()) ;
		else              crc (dd.crc ()) ;
	}
	// services
	constexpr DepDigestBase& operator|=(DepDigestBase const& other) {            // assumes other has been accessed after us
		if constexpr (HasBase) SWEAR(Base::operator==(other),other) ;
		if (+accesses) {
			SWEAR(is_date==other.is_date,is_date) ;                              // else, cannot make fusion
			if (is_date) { if (date()!=other.date()) crc({}) ; }                 // destroy info if digests disagree
			else         { if (crc ()!=other.crc ()) crc({}) ; }                 // .
			// parallel is kept untouched as we are the first access
		} else {
			crc_date(other) ;
			parallel = other.parallel ;
		}
		dflags   |= other.dflags   ;
		accesses |= other.accesses ;
		return *this ;
	}
	constexpr void tag(Tag tag) {
		SWEAR(is_date) ;
		if (!_date) { crc(Crc::None) ; return ; }                                // even if file appears, the whole job has been executed seeing the file as absent
		switch (tag) {
			case Tag::Reg  :
			case Tag::Exe  :
			case Tag::Lnk  : if (!Crc::s_sense(accesses,tag)) crc(tag) ; break ; // just record the tag if enough to match (e.g. accesses==Lnk and tag==Reg)
			case Tag::None :
			case Tag::Dir  : if (+_date                     ) crc({} ) ; break ;
			case Tag::Err  :                                  crc({} ) ; break ; // if we dont know what we access, we cannot know the crc
		}
	}
	// data
	Dflags   dflags     ;                                                        //   6< 8 bits
	Accesses accesses   ;                                                        //   3< 8 bits
	bool     parallel:1 = false ;                                                //      1 bit
	bool     is_date :1 = false ;                                                //      1 bit
private :
	union {
		Crc   _crc  = {} ;                                                       // ~46<64 bits
		Ddate _date ;                                                            // ~45<64 bits
	} ;
} ;
// END_OF_VERSIONING
template<class B> ::ostream& operator<<( ::ostream& os , DepDigestBase<B> const& dd ) {
	const char* sep = "" ;
	/**/                                                os << "D("                           ;
	if constexpr ( !::is_void_v<B>                  ) { os <<sep<< static_cast<B const&>(dd) ; sep = "," ; }
	if           ( +dd.accesses                     ) { os <<sep<< dd.accesses               ; sep = "," ; }
	if           ( +dd.dflags                       ) { os <<sep<< dd.dflags                 ; sep = "," ; }
	if           (  dd.parallel                     ) { os <<sep<< "parallel"                ; sep = "," ; }
	if           ( +dd.accesses && dd.is_date       ) { os <<sep<< dd.date()                 ; sep = "," ; }
	else if      ( +dd.accesses && +dd.crc()        ) { os <<sep<< dd.crc()                  ; sep = "," ; }
	return                                              os <<')'                             ;
}
// START_OF_VERSIONING

using DepDigest = DepDigestBase<void> ;
static_assert(::is_trivially_copyable_v<DepDigest>) ; // as long as this holds, we do not have to bother about union member cxtor/dxtor

struct TargetDigest {
	friend ::ostream& operator<<( ::ostream& , TargetDigest const& ) ;
	using Crc = Hash::Crc ;
	// data
	Tflags      tflags       = {}    ;
	ExtraTflags extra_tflags = {}    ;
	bool        polluted     = false ; // if true <=  file was seen as existing while not incremental
	Crc         crc          = {}    ; // if None <=> file was unlinked, if Unknown => file is idle (not written, not unlinked)
	Time::Ddate date         = {}    ;
} ;

struct JobDigest {
	friend ::ostream& operator<<( ::ostream& , JobDigest const& ) ;
	// data
	Status                 status   = Status::New ;
	::vmap_s<TargetDigest> targets  = {}          ;
	::vmap_s<DepDigest   > deps     = {}          ; // INVARIANT : sorted in first access order
	::string               stderr   = {}          ;
	::string               stdout   = {}          ;
	int                    wstatus  = 0           ;
	Time::Pdate            end_date = {}          ;
	JobStats               stats    = {}          ;
} ;

struct JobExecRpcReq ;

struct JobRpcReq {
	using P   = JobProc             ;
	using SI  = SeqId               ;
	using JI  = JobIdx              ;
	using MDD = ::vmap_s<DepDigest> ;
	friend ::ostream& operator<<( ::ostream& , JobRpcReq const& ) ;
	// statics
	// cxtors & casts
	JobRpcReq() = default ;
	JobRpcReq( P p , SI si , JI j                                    ) : proc{p} , seq_id{si} , job{j}                                             { SWEAR( p==P::None                      ) ; }
	JobRpcReq( P p , SI si , JI j , in_port_t   pt , ::string&& m={} ) : proc{p} , seq_id{si} , job{j} , port  {pt              } , msg{::move(m)} { SWEAR( p==P::Start                     ) ; }
	JobRpcReq( P p , SI si , JI j , Status      s  , ::string&& m={} ) : proc{p} , seq_id{si} , job{j} , digest{.status=s       } , msg{::move(m)} { SWEAR( p==P::End && s<=Status::Garbage ) ; }
	JobRpcReq( P p , SI si , JI j , JobDigest&& d  , ::string&& m={} ) : proc{p} , seq_id{si} , job{j} , digest{::move(d)       } , msg{::move(m)} { SWEAR( p==P::End                       ) ; }
	JobRpcReq( P p , SI si , JI j ,                  ::string&& m    ) : proc{p} , seq_id{si} , job{j} ,                            msg{::move(m)} { SWEAR( p==P::LiveOut                   ) ; }
	JobRpcReq( P p , SI si , JI j , MDD&&       ds                   ) : proc{p} , seq_id{si} , job{j} , digest{.deps=::move(ds)}                  { SWEAR( p==P::ChkDeps || p==P::DepInfos ) ; }
	//
	JobRpcReq( P p , SI si , JI j , ::string&& code , ::string&& f , ::string&& c              ) : proc{p} , seq_id{si} , job{j} , msg{code} , file{f} , ctx{c}               { SWEAR(p==P::Decode) ; }
	JobRpcReq( P p , SI si , JI j , ::string&& val  , ::string&& f , ::string&& c , uint8_t ml ) : proc{p} , seq_id{si} , job{j} , msg{val } , file{f} , ctx{c} , min_len{ml} { SWEAR(p==P::Encode) ; }
	//
	JobRpcReq( SI si , JI j , JobExecRpcReq&& jerr ) ;
	// services
	template<IsStream T> void serdes(T& s) {
		if (::is_base_of_v<::istream,T>) *this = JobRpcReq() ;
		::serdes(s,proc  ) ;
		::serdes(s,seq_id) ;
		::serdes(s,job   ) ;
		switch (proc) {
			case P::None  : break ;
			case P::Start :
				::serdes(s,port) ;
				::serdes(s,msg ) ;
			break ;
			case P::LiveOut  : ::serdes(s,msg   ) ; break ;
			case P::ChkDeps  : ::serdes(s,digest) ; break ;
			case P::DepInfos : ::serdes(s,digest) ; break ;
			case P::Encode :
				::serdes(s,min_len) ;
				[[fallthrough]] ;
			case P::Decode :
				::serdes(s,msg ) ;
				::serdes(s,file) ;
				::serdes(s,ctx ) ;
			break ;
			case P::End :
				::serdes(s,digest     ) ;
				::serdes(s,dynamic_env) ;
				::serdes(s,msg        ) ;
			break ;
		DF}
	}
	// data
	P         proc        = P::None ;
	SI        seq_id      = 0       ;
	JI        job         = 0       ;
	in_port_t port        = 0       ; // if proc == Start
	JobDigest digest      ;           // if proc ==         ChkDeps | DepInfos |                              End
	::vmap_ss dynamic_env ;           // if proc ==                                                           End env variables computed in job_exec
	::string  msg         ;           // if proc == Start |                      LiveOut  | Decode | Encode | End
	::string  file        ;           // if proc ==                                         Decode | Encode
	::string  ctx         ;           // if proc ==                                         Decode | Encode
	uint8_t   min_len     ;           // if proc ==                                                  Encode
} ;

struct MatchFlags {
	friend ::ostream& operator<<( ::ostream& , MatchFlags const& ) ;
	// cxtors & casts
	MatchFlags(                                ) = default ;
	MatchFlags( Tflags tf , ExtraTflags etf={} ) : is_target{Yes} , _tflags{tf} , _extra_tflags{etf} {}
	MatchFlags( Dflags df , ExtraDflags edf={} ) : is_target{No } , _dflags{df} , _extra_dflags{edf} {}
	// accesses
	bool        operator+   () const {                         return is_target!=Maybe ; }
	bool        operator!   () const {                         return !+*this          ; }
	Tflags      tflags      () const { SWEAR(is_target==Yes) ; return _tflags          ; }
	Dflags      dflags      () const { SWEAR(is_target==No ) ; return _dflags          ; }
	ExtraTflags extra_tflags() const { SWEAR(is_target==Yes) ; return _extra_tflags    ; }
	ExtraDflags extra_dflags() const { SWEAR(is_target==No ) ; return _extra_dflags    ; }
	// data
	Bool3 is_target = Maybe ;
private :
	Tflags      _tflags       ; // if  is_target
	Dflags      _dflags       ; // if !is_target
	ExtraTflags _extra_tflags ; // if  is_target
	ExtraDflags _extra_dflags ; // if !is_target
} ;

ENUM_2( AutodepMethod                     // PER_AUTODEP_METHOD : add entry here
,	Ld   = LdAudit                        // >=Ld means a lib is pre-loaded (through LD_AUDIT or LD_PRELOAD)
,	Dflt = HAS_LD_AUDIT?LdAudit:LdPreload // by default, use  a compromize between speed an reliability
,	None
,	Ptrace
,	LdAudit
,	LdPreload
,	LdPreloadJemalloc
)

struct JobRpcReply {
	friend ::ostream& operator<<( ::ostream& , JobRpcReply const& ) ;
	using Crc  = Hash::Crc ;
	using Proc = JobProc   ;
	// cxtors & casts
	JobRpcReply(                                                                      ) = default ;
	JobRpcReply( Proc p                                                               ) : proc{p}                                           {                                                       }
	JobRpcReply( Proc p , Bool3                                  o                    ) : proc{p} , ok{o}                                   { SWEAR( proc==Proc::ChkDeps                        ) ; }
	JobRpcReply( Proc p , ::vector<pair<Bool3/*ok*/,Crc>> const& is                   ) : proc{p} ,         dep_infos{is}                   { SWEAR( proc==Proc::DepInfos                       ) ; }
	JobRpcReply( Proc p , ::string                        const& t  , Crc c , Bool3 o ) : proc{p} , ok{o} ,                 txt{t} , crc{c} { SWEAR( proc==Proc::Decode   || proc==Proc::Encode ) ; }
	// services
	template<IsStream S> void serdes(S& s) {
		if (is_base_of_v<::istream,S>) *this = JobRpcReply() ;
		::serdes(s,proc) ;
		switch (proc) {
			case Proc::None     :
			case Proc::End      :                         break ;
			case Proc::DepInfos : ::serdes(s,dep_infos) ; break ;
			case Proc::ChkDeps  : ::serdes(s,ok       ) ; break ;
			case Proc::Decode :
			case Proc::Encode :
				::serdes(s,ok ) ;
				::serdes(s,txt) ;
				::serdes(s,crc) ;
			break ;
			case Proc::Start :
				::serdes(s,addr            ) ;
				::serdes(s,autodep_env     ) ;
				::serdes(s,chroot          ) ;
				::serdes(s,cmd             ) ;
				::serdes(s,cwd_s           ) ;
				::serdes(s,deps            ) ;
				::serdes(s,env             ) ;
				::serdes(s,hash_algo       ) ;
				::serdes(s,interpreter     ) ;
				::serdes(s,keep_tmp        ) ;
				::serdes(s,kill_sigs       ) ;
				::serdes(s,live_out        ) ;
				::serdes(s,method          ) ;
				::serdes(s,network_delay   ) ;
				::serdes(s,pre_actions     ) ;
				::serdes(s,remote_admin_dir) ;
				::serdes(s,small_id        ) ;
				::serdes(s,star_matches    ) ;
				::serdes(s,static_matches  ) ;
				::serdes(s,stdin           ) ;
				::serdes(s,stdout          ) ;
				::serdes(s,timeout         ) ;
				::serdes(s,use_script      ) ;
			break ;
		DF}
	}
	// data
	Proc                      proc             = Proc::None    ;
	in_addr_t                 addr             = 0             ; // proc == Start                 , the address at which server and subproccesses can contact job_exec
	AutodepEnv                autodep_env      ;                 // proc == Start
	::string                  chroot           ;                 // proc == Start
	::pair_ss/*script,call*/  cmd              ;                 // proc == Start
	::string                  cwd_s            ;                 // proc == Start
	::vmap_s<DepDigest>       deps             ;                 // proc == Start                 , deps already accessed (always includes static deps)
	::vmap_ss                 env              ;                 // proc == Start
	Algo                      hash_algo        = Algo::Xxh     ; // proc == Start
	::vector_s                interpreter      ;                 // proc == Start                 , actual interpreter used to execute cmd
	bool                      keep_tmp         = false         ; // proc == Start
	vector<uint8_t>           kill_sigs        ;                 // proc == Start
	bool                      live_out         = false         ; // proc == Start
	AutodepMethod             method           = {}/*garbage*/ ; // proc == Start
	Time::Delay               network_delay    ;                 // proc == Start
	::vmap_s<FileAction>      pre_actions      ;                 // proc == Start
	::string                  remote_admin_dir ;                 // proc == Start
	SmallId                   small_id         = 0             ; // proc == Start
	::vmap_s<MatchFlags>      star_matches     ;                 // proc == Start                 , maps regexprs to flags
	::vmap_s<MatchFlags>      static_matches   ;                 // proc == Start
	::string                  stdin            ;                 // proc == Start
	::string                  stdout           ;                 // proc == Start
	Time::Delay               timeout          ;                 // proc == Start
	bool                      use_script       = false         ; // proc == Start
	::vector<pair<Bool3,Crc>> dep_infos        ;                 // proc == DepInfos
	Bool3                     ok               = Maybe         ; // proc == ChkDeps|Decode|Encode , if No <=> deps in error, if Maybe <=> deps not ready
	::string                  txt              ;                 // proc ==         Decode|Encode , value for Decode, code for Encode
	Crc                       crc              ;                 // proc ==         Decode|Encode , crc of txt
} ;

// END_OF_VERSIONING

ENUM_1( JobExecRpcProc
,	HasFiles = Access  // >=HasFiles means files field is significative
,	None
,	ChkDeps
,	Tmp                // write activity in tmp has been detected (hence clean up is required)
,	Trace              // no algorithmic info, just for tracing purpose
,	Panic              // ensure job is in error
,	Confirm
,	Access
,	Guard
,	DepInfos
,	Decode
,	Encode
)

struct AccessDigest {                                                  // order is first read, first write, last write, unlink
	friend ::ostream& operator<<( ::ostream& , AccessDigest const& ) ;
	// accesses
	bool operator+() const { return +accesses || write!=No ; }         // true if some access of some sort is done
	bool operator!() const { return !+*this                ; }
	// services
	bool          operator==(AccessDigest const&      ) const = default ;
	AccessDigest& operator|=(AccessDigest const&      ) ;
	AccessDigest  operator| (AccessDigest const& other) const { return ::copy(*this)|= other ; }
	// data
	Bool3       write        = No ;                                    // if Maybe, write is not confirmed
	Accesses    accesses     = {} ;
	Tflags      tflags       = {} ;                                    // dflags are inherited from DepDigest
	ExtraTflags extra_tflags = {} ;
	Dflags      dflags       = {} ;
	ExtraDflags extra_dflags = {} ;
} ;

struct JobExecRpcReq {
	friend ::ostream& operator<<( ::ostream& , JobExecRpcReq const& ) ;
	// make short lines
	using AD = AccessDigest   ;
	using P  = JobExecRpcProc ;
	using PD = Time::Pdate    ;
	using DD = Time::Ddate    ;
	// statics
private :
	static ::vmap_s<DD> _s_mk_mdd(::vector_s&& fs) { ::vmap_s<DD> res ; for( ::string& f : fs ) res.emplace_back(::move(f),DD()) ; return res ; }
	// cxtors & casts
public :
	JobExecRpcReq() = default ;
	// Confirm always has a confirm argument
	static constexpr P Confirm = P::Confirm ;
	JobExecRpcReq( P p ,                   ::string&& t={} ) : proc{p} ,                                                              txt{::move(t)} { SWEAR( p<P::HasFiles && p!=Confirm ) ; }
	JobExecRpcReq( P p , bool sc         , ::string&& t={} ) : proc{p} , sync{sc&&p!=Confirm} , digest{.write=(No|sc)&(p==Confirm)} , txt{::move(t)} { SWEAR( p<P::HasFiles               ) ; }
	JobExecRpcReq( P p , bool s , bool c , ::string&& t={} ) : proc{p} , sync{s             } , digest{.write= No|c               } , txt{::move(t)} { SWEAR(                  p==Confirm ) ; }
	//
private :
	JobExecRpcReq( P p , bool slv , ::string&& cwd_ , ::vmap_s<DD>&& fs , AccessDigest const& d , bool nf , bool s , ::string&& comment ) :
		proc     { p               }
	,	sync     { s               }
	,	solve    { slv             }
	,	no_follow{ nf              }
	,	cwd      { ::move(cwd_)    }
	,	files    { ::move(fs)      }
	,	digest   { d               }
	,	txt      { ::move(comment) }
	{ SWEAR( p==P::Access || p==P::DepInfos ) ; }
public : //!                                                                                                    solve cwd                                 no_follow sync
	JobExecRpcReq( P p , ::vmap_s<DD>&& fs , AD const& ad ,           bool s , ::string&& c ) : JobExecRpcReq{p,false,{}         ,          ::move(fs) ,ad,false   ,s    ,::move(c)} {}
	JobExecRpcReq( P p , ::vmap_s<DD>&& fs , AD const& ad ,                    ::string&& c ) : JobExecRpcReq{p,false,{}         ,          ::move(fs) ,ad,false   ,false,::move(c)} {}
	JobExecRpcReq( P p , ::vector_s  && fs , AD const& ad , bool nf , bool s , ::string&& c ) : JobExecRpcReq{p,true ,Disk::cwd(),_s_mk_mdd(::move(fs)),ad,nf      ,s    ,::move(c)} {}
	JobExecRpcReq( P p , ::vector_s  && fs , AD const& ad , bool nf ,          ::string&& c ) : JobExecRpcReq{p,true ,Disk::cwd(),_s_mk_mdd(::move(fs)),ad,nf      ,false,::move(c)} {}
	//
	JobExecRpcReq( P p , ::vector_s&& fs , ::string&& c={} ) : proc{p} , files{_s_mk_mdd(::move(fs))} , txt{::move(c)} { SWEAR(p==P::Guard) ; }
	//
	JobExecRpcReq( P p , ::string&& f , ::string&& code , ::string&& c ) :
		proc   { p                     }
	,	sync   { true                  }
	,	solve  { true                  }
	,	cwd    { Disk::cwd()           }
	,	files  { {{::move(f),{}}}      }                 // no need for date for codec
	,	digest { .accesses=Access::Reg }
	,	txt    { code                  }
	,	ctx    { c                     }
	{ SWEAR(p==P::Decode) ; }
	JobExecRpcReq( P p , ::string&& f , ::string&& val , ::string&& c , uint8_t ml ) :
		proc    { p                     }
	,	sync    { true                  }
	,	solve   { true                  }
	,	min_len { ml                    }
	,	cwd     { Disk::cwd()           }
	,	files   { {{::move(f),{}}}      }                // no need for date for codec
	,	digest  { .accesses=Access::Reg }
	,	txt     { val                   }
	,	ctx     { c                     }
	{ SWEAR(p==P::Encode) ; }
	// services
public :
	template<IsStream T> void serdes(T& s) {
		if (::is_base_of_v<::istream,T>) *this = {} ;
		::serdes(s,proc) ;
		::serdes(s,date) ;
		::serdes(s,sync) ;
		if (proc>=P::HasFiles) {
			::serdes(s,solve) ;
			::serdes(s,files) ;
			if (solve) {
				::serdes(s,cwd      ) ;
				::serdes(s,no_follow) ;
			}
		}
		switch (proc) {
			case P::ChkDeps  :
			case P::Tmp      :
			case P::Trace    :
			case P::Panic    :
			case P::Guard    :                                                  break ;
			case P::Confirm  : ::serdes(s,digest.write) ;                       break ;
			case P::Access   :
			case P::DepInfos : ::serdes(s,digest      ) ;                       break ;
			case P::Decode   : ::serdes(s,ctx         ) ;                       break ;
			case P::Encode   : ::serdes(s,ctx         ) ; ::serdes(s,min_len) ; break ;
			default : ;
		}
		::serdes(s,txt) ;
	}
	// data
	P            proc      = P::None                   ;
	bool         sync      = false                     ;
	bool         solve     = false                     ; // if proc>=HasFiles, if true <=> files must be solved and dates added by probing disk
	bool         no_follow = false                     ; // if solve, whether links should not be followed
	uint8_t      min_len   = 0                         ; // if proc==Encode
	PD           date      = New                       ; // access date to reorder accesses during analysis
	::string     cwd       ;                             // if solve, cwd to use to solve files
	::vmap_s<DD> files     ;
	AccessDigest digest    ;
	::string     txt       ;                             // if proc==Access|Decode|Encode|Trace (comment for Access, code for Decode, value for Encode)
	::string     ctx       ;                             // if proc==Decode|Encode
} ;

struct JobExecRpcReply {
	friend ::ostream& operator<<( ::ostream& , JobExecRpcReply const& ) ;
	using Proc = JobExecRpcProc ;
	using Crc  = Hash::Crc      ;
	// cxtors & casts
	JobExecRpcReply(                                                    ) = default ;
	JobExecRpcReply( Proc p                                             ) : proc{p}                 { SWEAR( proc!=Proc::ChkDeps && proc!=Proc::DepInfos ) ; }
	JobExecRpcReply( Proc p , Bool3 o                                   ) : proc{p} , ok       {o } { SWEAR( proc==Proc::ChkDeps                         ) ; }
	JobExecRpcReply( Proc p , ::vector<pair<Bool3/*ok*/,Crc>> const& is ) : proc{p} , dep_infos{is} { SWEAR( proc==Proc::DepInfos                        ) ; }
	JobExecRpcReply( Proc p , ::string const&                        t  ) : proc{p} , txt      {t } { SWEAR( proc==Proc::Decode  || proc==Proc::Encode   ) ; }
	//
	JobExecRpcReply( JobRpcReply const& jrr ) ;
	// services
	template<IsStream S> void serdes(S& s) {
		if (::is_base_of_v<::istream,S>) *this = JobExecRpcReply() ;
		::serdes(s,proc) ;
		switch (proc) {
			case Proc::Access   :                         break ;
			case Proc::ChkDeps  : ::serdes(s,ok       ) ; break ;
			case Proc::DepInfos : ::serdes(s,dep_infos) ; break ;
			case Proc::Decode :
			case Proc::Encode :
				::serdes(s,ok ) ;
				::serdes(s,txt) ;
			break ;
		DF}
	}
	// data
	Proc                            proc      = Proc::None ;
	Bool3                           ok        = Maybe      ; // if proc==ChkDeps
	::vector<pair<Bool3/*ok*/,Crc>> dep_infos ;              // if proc==DepInfos
	::string                        txt       ;              // if proc==Decode|Encode (value for Decode, code for Encode)
} ;

// START_OF_VERSIONING

//
// JobSserverRpcReq
//

ENUM( JobServerRpcProc
,	Heartbeat
,	Kill
)

struct JobServerRpcReq {
	friend ::ostream& operator<<( ::ostream& , JobServerRpcReq const& ) ;
	using Proc = JobServerRpcProc ;
	// cxtors & casts
	JobServerRpcReq(                              ) = default ;
	JobServerRpcReq( Proc p , SeqId si            ) : proc{p} , seq_id{si}          { SWEAR(proc==Proc::Kill     ) ; }
	JobServerRpcReq( Proc p , SeqId si , JobIdx j ) : proc{p} , seq_id{si} , job{j} {                                } // need a job for heartbeat as we may have to reply on its behalf
	// services
	template<IsStream S> void serdes(S& s) {
		::serdes(s,proc  ) ;
		::serdes(s,seq_id) ;
		switch (proc) {
			case Proc::Heartbeat : ::serdes(s,job) ;                          break ;
			case Proc::Kill      : if (::is_base_of_v<::istream,S>) job = 0 ; break ;
		DF}
	}
	// data
	Proc   proc   = {} ;
	SeqId  seq_id = 0  ;
	JobIdx job    = 0  ;
} ;

struct SubmitAttrs {
	friend ::ostream& operator<<( ::ostream& , SubmitAttrs const& ) ;
	// services
	SubmitAttrs& operator|=(SubmitAttrs const& other) {
		// tag, deps and n_retries are independent of req but may not always be present
		if      ( tag==BackendTag::Unknown) tag       = other.tag       ; else if ( other.tag!=BackendTag::Unknown) SWEAR(tag      ==other.tag      ,tag      ,other.tag      ) ;
		if      (!deps                    ) deps      = other.deps      ; else if (+other.deps                    ) SWEAR(deps     ==other.deps     ,deps     ,other.deps     ) ;
		if      (!n_retries               ) n_retries = other.n_retries ; else if ( other.n_retries               ) SWEAR(n_retries==other.n_retries,n_retries,other.n_retries) ;
		pressure   = ::max(pressure ,other.pressure ) ;
		live_out  |= other.live_out                   ;
		reason    |= other.reason                     ;
		return *this ;
	}
	SubmitAttrs operator|(SubmitAttrs const& other) const {
		SubmitAttrs res = *this ;
		res |= other ;
		return res ;
	}
	// data
	BackendTag          tag       = {}    ;
	bool                live_out  = false ;
	uint8_t             n_retries = 0     ;
	Time::CoarseDelay   pressure  = {}    ;
	::vmap_s<DepDigest> deps      = {}    ;
	JobReason           reason    = {}    ;
} ;

struct JobInfoStart {
	friend ::ostream& operator<<( ::ostream& , JobInfoStart const& ) ;
	// data
	Hash::Crc   rule_cmd_crc = {}         ;
	::vector_s  stems        = {}         ;
	Time::Pdate eta          = {}         ;
	SubmitAttrs submit_attrs = {}         ;
	::vmap_ss   rsrcs        = {}         ;
	in_addr_t   host         = NoSockAddr ;
	JobRpcReq   pre_start    = {}         ;
	JobRpcReply start        = {}         ;
	::string    stderr       = {}         ;
} ;

struct JobInfoEnd {
	friend ::ostream& operator<<( ::ostream& , JobInfoEnd const& ) ;
	// data
	JobRpcReq end = {} ;
} ;

//
// codec
//

namespace Codec {

	static constexpr char CodecPfx[] = ADMIN_DIR "/codec/" ;

	::string mk_decode_node( ::string const& file , ::string const& ctx , ::string const& code ) ;
	::string mk_encode_node( ::string const& file , ::string const& ctx , ::string const& val  ) ;

	::string mk_file(::string const& node) ; // node may have been obtained from mk_decode_node or mk_encode_node

}

// END_OF_VERSIONING
